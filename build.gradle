plugins {
    id 'fabric-loom' version '0.2.5-SNAPSHOT'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'net.minecrell.licenser' version '0.4.1'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

if (isNullOrEmpty(System.getenv("TRAVIS_TAG")) && !isNullOrEmpty(System.getenv('TRAVIS_BUILD_NUMBER'))) {
    version = project.modVersion + '.' + System.getenv('TRAVIS_BUILD_NUMBER')
} else {
    version = project.modVersion
}
logger.lifecycle("${project.repoName} version ${project.version}")
group = project.mavenGroup

minecraft {
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraftVersion}"
    mappings "net.fabricmc:yarn:${project.yarnMappings}"
    modCompile "net.fabricmc:fabric-loader:${project.loaderVersion}"
}

license {
    header = file('HEADER.txt')
    include '**/*.java'
    style.java = 'BLOCK_COMMENT'
    newLine = false
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

def outputDirectory = file("$buildDir/pom-properties")
def pomProperties = file("$outputDirectory/pom.properties")

task generatePomPropertiesForJar {
    outputDirectory.mkdirs()
    pomProperties.text = """# Generated by Gradle ${gradle.gradleVersion} on ${new Date()}
groupId=${project.group}
artifactId=${project.name}
version=${project.version}
"""
    outputs.file(pomProperties)
}

processResources {
    inputs.properties "version": project.version, "description": project.description

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand(
                "version": project.version,
                "description": project.description,
                "repoOwner": project.repoOwner,
                "repoName": project.repoName,
                "id": project.modId,
                "minecraftVersionLimit": project.minecraftVersionLimit,
                "loaderVersionLimit": project.loaderVersionLimit
        )
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

artifacts {
    archives jar
    archives sourcesJar
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : System.getenv('bintray_user')
    key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : System.getenv('bintray_key')
    publish = true
    override = true
    publications = ['mavenJava']
    pkg {
        repo = project.bintrayRepo
        name = project.name
        user = bintray.user
        userOrg = project.repoOwner
        licenses = [project.codeLicense]
        desc = project.description
        websiteUrl = "https://github.com/${project.repoOwner}/${project.repoName}"
        issueTrackerUrl = "https://github.com/${project.repoOwner}/${project.repoName}/issues"
        vcsUrl = "https://github.com/${project.repoOwner}/${project.repoName}.git"
        publicDownloadNumbers = true

        githubRepo = "${project.repoOwner}/${project.repoName}"
        version {
            name = project.version
            released = new Date()
            if (!isNullOrEmpty(System.getenv("TRAVIS_TAG"))) {
                vcsTag = System.getenv("TRAVIS_TAG")
            } else {
                vcsTag = ''
            }
        }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = project.name
                description = project.description
                url = "https://github.com/${project.repoOwner}/${project.repoName}"
                licenses {
                    license {
                        name = project.codeLicense
                    }
                }

                scm {
                    url = "https://github.com/${project.repoOwner}/${project.repoName}"
                }
            }

            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                classifier = null
                builtBy remapJar
            }
        }
    }

    if (!isNullOrEmpty(System.getenv('GITHUB_OAUTH_TOKEN'))) {
        publications {
            mavenGitHub(MavenPublication) {
                pom {
                    name = project.name
                    description = project.description
                    url = "https://github.com/${project.repoOwner}/${project.repoName}"
                    licenses {
                        license {
                            name = project.codeLicense
                        }
                    }

                    scm {
                        url = "https://github.com/${project.repoOwner}/${project.repoName}"
                    }
                }

                // add all the jars that should be included when publishing to maven
                artifact(jar) {
                    classifier = null
                    builtBy remapJar
                }
            }
        }
        // select the repositories you want to publish to
        repositories {
            maven {
                name = "GitHub"
                url = uri("https://maven.pkg.github.com/${project.repoOwner}/${project.repoName}")
                credentials {
                    username = "${project.githubPackagePublisher}"
                    password = System.getenv('GITHUB_OAUTH_TOKEN')
                }
            }
        }
    }
}

tasks.withType(Jar) {
    dependsOn("generatePomFileForMavenJavaPublication", "generatePomPropertiesForJar")
    into("META-INF/maven/${project.group}/${project.name}") {
        from(generatePomFileForMavenJavaPublication) {
            rename(".+", "pom.xml")
        }
        from(generatePomPropertiesForJar)
    }
}

static boolean isNullOrEmpty(String st) {
    return st == null || st.isEmpty()
}
